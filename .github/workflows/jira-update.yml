name: GitHub-Jira-Sync

on:
  pull_request:
    types:
      - opened
      - edited
      - closed
      - reopened
      - ready_for_review
      - review_requested
      - review_request_removed
      - review_submitted
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  sync_with_jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Jira ID from title depending on event type
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            TITLE="${{ github.event.issue.title }}"
          else
            TITLE="${{ github.event.pull_request.title }}"
          fi

          echo "Title to parse: $TITLE"
          JIRA_ID=$(echo "$TITLE" | grep -oE '[A-Z]+-[0-9]+' || true)

          if [ -n "$JIRA_ID" ]; then
            echo "JIRA_ID=$JIRA_ID" >> $GITHUB_ENV
          else
            echo "No Jira ID found in title."
          fi

      - name: Sync PR updates with Jira (Formatted comment)
        env:
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          if [ -z "${{ env.JIRA_ID }}" ]; then
            echo "No Jira ID found, skipping Jira update."
            exit 0
          fi

          AUTHOR="${{ github.actor }}"
          DATE_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          BRANCH="${{ github.head_ref }}"

          if [ "${{ github.event_name }}" = "issue_comment" ] || [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            RAW_COMMENT="${{ github.event.comment.body }}"
          elif [ "${{ github.event_name }}" = "pull_request_review" ]; then
            RAW_COMMENT="${{ github.event.review.body }}"
          else
            STATUS="${{ github.event.action }}"
            RAW_COMMENT="GitHub PR #${{ github.event.number }} is $STATUS."
          fi

          FORMATTED_COMMENT="${AUTHOR} commented on ${DATE_TIME} on branch ${BRANCH}
${RAW_COMMENT}"

          ESCAPED_COMMENT=$(printf '%s' "$FORMATTED_COMMENT" | jq -Rs .)

          echo "Posting comment to Jira:"
          echo "$FORMATTED_COMMENT"

          echo "{\"body\":$ESCAPED_COMMENT}" | curl -X POST "${JIRA_BASE_URL}/rest/api/2/issue/${{ env.JIRA_ID }}/comment" \
            -H "Authorization: Bearer $JIRA_TOKEN" \
            -H "Content-Type: application/json" \
            --data @-
